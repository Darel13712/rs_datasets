{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to rs_datasets This tool allows you download, unpack and read recommender systems datasets into pandas.DataFrame as easy as data = Dataset() . Installation pip install rs_datasets Available datasets The following datasets are available for automatic download and can be retrieved with this package. Note Check dataset license to know available usecases. Authors of this package are not affiliated with dataset contents in any way. Dataset Users Items Interactions Movielens 162k 62k up to 25m Million Song Dataset 1m 385k 48m Netflix 480k 17.7k 100m Goodreads 800k 1.5m 225m Last.fm 360k 290k 17.5m Epinions 49k 140k 660k Book Crossing 279k 271k 1.1m Dating Agency 135k 169k 17.3m Jester 73k 100 4.1m Amazon ? 1 ? 1 up to 32m Rekko 100k, 500k 8k 500k, 9.6m Example of use from rs_datasets import MovieLens ml = MovieLens () ml . info () ratings user_id item_id rating timestamp 0 1 1 4.0 964982703 1 1 3 4.0 964981247 2 1 6 4.0 964982224 items item_id ... genres 0 1 ... Adventure|Animation|Children|Comedy|Fantasy 1 2 ... Adventure|Children|Fantasy 2 3 ... Comedy|Romance [3 rows x 3 columns] tags user_id item_id tag timestamp 0 2 60756 funny 1445714994 1 2 60756 Highly quotable 1445714996 2 2 60756 will ferrell 1445714992 links item_id imdb_id tmdb_id 0 1 114709 862.0 1 2 113497 8844.0 2 3 113228 15602.0 Loaded DataFrames are available as class attributes. Their download speed is extremely slow and I wasn't patient enough to download the biggest one to check this. \u21a9 \u21a9","title":"Welcome to rs_datasets"},{"location":"#welcome-to-rs_datasets","text":"This tool allows you download, unpack and read recommender systems datasets into pandas.DataFrame as easy as data = Dataset() .","title":"Welcome to rs_datasets"},{"location":"#installation","text":"pip install rs_datasets","title":"Installation"},{"location":"#available-datasets","text":"The following datasets are available for automatic download and can be retrieved with this package. Note Check dataset license to know available usecases. Authors of this package are not affiliated with dataset contents in any way. Dataset Users Items Interactions Movielens 162k 62k up to 25m Million Song Dataset 1m 385k 48m Netflix 480k 17.7k 100m Goodreads 800k 1.5m 225m Last.fm 360k 290k 17.5m Epinions 49k 140k 660k Book Crossing 279k 271k 1.1m Dating Agency 135k 169k 17.3m Jester 73k 100 4.1m Amazon ? 1 ? 1 up to 32m Rekko 100k, 500k 8k 500k, 9.6m","title":"Available datasets"},{"location":"#example-of-use","text":"from rs_datasets import MovieLens ml = MovieLens () ml . info () ratings user_id item_id rating timestamp 0 1 1 4.0 964982703 1 1 3 4.0 964981247 2 1 6 4.0 964982224 items item_id ... genres 0 1 ... Adventure|Animation|Children|Comedy|Fantasy 1 2 ... Adventure|Children|Fantasy 2 3 ... Comedy|Romance [3 rows x 3 columns] tags user_id item_id tag timestamp 0 2 60756 funny 1445714994 1 2 60756 Highly quotable 1445714996 2 2 60756 will ferrell 1445714992 links item_id imdb_id tmdb_id 0 1 114709 862.0 1 2 113497 8844.0 2 3 113228 15602.0 Loaded DataFrames are available as class attributes. Their download speed is extremely slow and I wasn't patient enough to download the biggest one to check this. \u21a9 \u21a9","title":"Example of use"},{"location":"directory/","text":"Managing dataset directory Each dataset creates its folder inside dataset directory. Dataset directory is determined by following priorities: path parameter from initialization Environment variable RS_DATASETS Default folder, which is in your home directory: ~/rs_datasets/ So in general case you don't have to do anything and files corresponding to dataset will be stored in ~/rs_datasets/dataset/ .","title":"Managing dataset directory"},{"location":"directory/#managing-dataset-directory","text":"Each dataset creates its folder inside dataset directory. Dataset directory is determined by following priorities: path parameter from initialization Environment variable RS_DATASETS Default folder, which is in your home directory: ~/rs_datasets/ So in general case you don't have to do anything and files corresponding to dataset will be stored in ~/rs_datasets/dataset/ .","title":"Managing dataset directory"},{"location":"Datasets/amazon/","text":"Amazon This is ratings by category for Amazon Review Data (2018) . You can download 5-core reviews from dataset site. Full reviews and metadata are available per request as well. Stats Use category parameter to specify which category to download. Key Ratings fashion 883,636 beauty 371,345 appliances 602,777 arts 2,875,917 automotive 7,990,166 books 51,311,621 cds 4,543,369 phones 10,063,255 clothing 32,292,099 music 1,584,082 electronics 20,994,353 cards 147,194 grocery 5,074,160 kitchen 21,928,568 scientific 1,758,333 kindle 5,722,988 luxury 574,628 subscriptions 89,689 movies 8,765,568 musical instruments 1,512,530 office 5,581,313 garden 5,236,058 pet 6,542,483 pantry 471,614 software 459,436 sports 12,980,837 tools 9,015,203 toys 8,201,231 game 2,565,349 Example from rs_datasets import Amazon amazon = Amazon ( 'cards' ) amazon . info () ratings user_id item_id rating 0 B001GXRQW0 APV13CM0919JD 1.0 1 B001GXRQW0 A3G8U1G1V082SN 5.0 2 B001GXRQW0 A11T2Q0EVTUWP 5.0","title":"Amazon"},{"location":"Datasets/amazon/#amazon","text":"This is ratings by category for Amazon Review Data (2018) . You can download 5-core reviews from dataset site. Full reviews and metadata are available per request as well.","title":"Amazon"},{"location":"Datasets/amazon/#stats","text":"Use category parameter to specify which category to download. Key Ratings fashion 883,636 beauty 371,345 appliances 602,777 arts 2,875,917 automotive 7,990,166 books 51,311,621 cds 4,543,369 phones 10,063,255 clothing 32,292,099 music 1,584,082 electronics 20,994,353 cards 147,194 grocery 5,074,160 kitchen 21,928,568 scientific 1,758,333 kindle 5,722,988 luxury 574,628 subscriptions 89,689 movies 8,765,568 musical instruments 1,512,530 office 5,581,313 garden 5,236,058 pet 6,542,483 pantry 471,614 software 459,436 sports 12,980,837 tools 9,015,203 toys 8,201,231 game 2,565,349","title":"Stats"},{"location":"Datasets/amazon/#example","text":"from rs_datasets import Amazon amazon = Amazon ( 'cards' ) amazon . info () ratings user_id item_id rating 0 B001GXRQW0 APV13CM0919JD 1.0 1 B001GXRQW0 A3G8U1G1V082SN 5.0 2 B001GXRQW0 A11T2Q0EVTUWP 5.0","title":"Example"},{"location":"Datasets/bookx/","text":"Book-Crossing Book-crossing dataset contains user ratings of books on a scale from 1 to 10. Books have extra information and links to covers. Users have age and location features. item_ids are actual book ISBNs. Stats 278,858 users 271,379 items 1,149,780 ratings Example from rs_datasets import BookCrossing bx = BookCrossing () bx . info () ratings user_id item_id rating 0 276725 034545104X 0 1 276726 0155061224 5 2 276727 0446520802 0 items item_id title author year publisher img_s img_m img_l 0 0195153448 Classical Mythology Mark P. O. Morford 2002 Oxford University Press http://... http://... http://... 1 0002005018 Clara Callan Richard Bruce Wright 2001 HarperFlamingo Canada http://... http://... http://... 2 0060973129 Decision in Normandy Carlo D'Este 1991 HarperPerennial http://... http://... http://... users user_id location age 0 1 nyc, new york, usa NaN 1 2 stockton, california, usa 18.0 2 3 moscow, yukon territory, russia NaN","title":"Book-Crossing"},{"location":"Datasets/bookx/#book-crossing","text":"Book-crossing dataset contains user ratings of books on a scale from 1 to 10. Books have extra information and links to covers. Users have age and location features. item_ids are actual book ISBNs.","title":"Book-Crossing"},{"location":"Datasets/bookx/#stats","text":"278,858 users 271,379 items 1,149,780 ratings","title":"Stats"},{"location":"Datasets/bookx/#example","text":"from rs_datasets import BookCrossing bx = BookCrossing () bx . info () ratings user_id item_id rating 0 276725 034545104X 0 1 276726 0155061224 5 2 276727 0446520802 0 items item_id title author year publisher img_s img_m img_l 0 0195153448 Classical Mythology Mark P. O. Morford 2002 Oxford University Press http://... http://... http://... 1 0002005018 Clara Callan Richard Bruce Wright 2001 HarperFlamingo Canada http://... http://... http://... 2 0060973129 Decision in Normandy Carlo D'Este 1991 HarperPerennial http://... http://... http://... users user_id location age 0 1 nyc, new york, usa NaN 1 2 stockton, california, usa 18.0 2 3 moscow, yukon territory, russia NaN","title":"Example"},{"location":"Datasets/dating_agency/","text":"Dating Agency Dating Agency dataset contains 1-10 ratings of profiles on a dating site. user_id is user who provided rating profile_id is user who has been rated not every profile has been rated ratings are on a 1-10 scale where 10 is best (integer ratings only) only users who provided at least 20 ratings were included users who provided constant ratings were excluded gender is denoted by a \"M\" for male and \"F\" for female and \"U\" for unknown Stats 135,359 users 168,791 profiles rated 17,359,346 ratings Example from rs_datasets import DatingAgency da = DatingAgency () da . info () ratings user_id profile_id rating 0 1 133 8 1 1 720 6 2 1 971 10 users user_id gender 0 1 F 1 2 F 2 3 U","title":"Dating Agency"},{"location":"Datasets/dating_agency/#dating-agency","text":"Dating Agency dataset contains 1-10 ratings of profiles on a dating site. user_id is user who provided rating profile_id is user who has been rated not every profile has been rated ratings are on a 1-10 scale where 10 is best (integer ratings only) only users who provided at least 20 ratings were included users who provided constant ratings were excluded gender is denoted by a \"M\" for male and \"F\" for female and \"U\" for unknown","title":"Dating Agency"},{"location":"Datasets/dating_agency/#stats","text":"135,359 users 168,791 profiles rated 17,359,346 ratings","title":"Stats"},{"location":"Datasets/dating_agency/#example","text":"from rs_datasets import DatingAgency da = DatingAgency () da . info () ratings user_id profile_id rating 0 1 133 8 1 1 720 6 2 1 971 10 users user_id gender 0 1 F 1 2 F 2 3 U","title":"Example"},{"location":"Datasets/epinions/","text":"Epinions Epinions dataset contains item ratings and trust statements between users. There are no distrust statements in the dataset (block list) but only trust statements (web of trust), because the block list is kept private and not shown on the site. Stats 49,290 users who rated a total of 139,738 different items at least once, writing 664,824 reviews and 487,181 issued trust statements. Example from rs_datasets import Epinions epinions = Epinions () epinions . info () ratings user_id item_id rating 0 1 100 4 1 1 101 5 2 1 102 3 trust source_user_id target_user_id trust_value 0 22605 42915 True 1 22605 5052 True 2 22605 42913 True","title":"Epinions"},{"location":"Datasets/epinions/#epinions","text":"Epinions dataset contains item ratings and trust statements between users. There are no distrust statements in the dataset (block list) but only trust statements (web of trust), because the block list is kept private and not shown on the site.","title":"Epinions"},{"location":"Datasets/epinions/#stats","text":"49,290 users who rated a total of 139,738 different items at least once, writing 664,824 reviews and 487,181 issued trust statements.","title":"Stats"},{"location":"Datasets/epinions/#example","text":"from rs_datasets import Epinions epinions = Epinions () epinions . info () ratings user_id item_id rating 0 1 100 4 1 1 101 5 2 1 102 3 trust source_user_id target_user_id trust_value 0 22605 42915 True 1 22605 5052 True 2 22605 42913 True","title":"Example"},{"location":"Datasets/goodreads/","text":"Goodreads This dataset is user-book interactions from Goodreads dataset. You can find text reviews and additional data on dataset site. Stats 876,145 users 2,360,650 books 228,648,342 interactions Extra parameters read_maps=False ids in interactions are encoded to save memory. You can read mappings, but there's no point if you don't use the rest of the dataset, which is not included here. Example from rs_datasets import Goodreads goodreads = Goodreads ( read_maps = True ) goodreads . info () ratings user_id item_id is_read rating is_reviewed 0 0 948 True 5 False 1 0 947 True 5 True 2 0 946 True 5 False books book_id_csv book_id 0 0 34684622 1 1 34536488 2 2 34017076 users user_id_csv user_id 0 0 8842281e1d1347389f2ab93d60773d4d 1 1 72fb0d0087d28c832f15776b0d936598 2 2 ab2923b738ea3082f5f3efcbbfacb218","title":"Goodreads"},{"location":"Datasets/goodreads/#goodreads","text":"This dataset is user-book interactions from Goodreads dataset. You can find text reviews and additional data on dataset site.","title":"Goodreads"},{"location":"Datasets/goodreads/#stats","text":"876,145 users 2,360,650 books 228,648,342 interactions","title":"Stats"},{"location":"Datasets/goodreads/#extra-parameters","text":"read_maps=False ids in interactions are encoded to save memory. You can read mappings, but there's no point if you don't use the rest of the dataset, which is not included here.","title":"Extra parameters"},{"location":"Datasets/goodreads/#example","text":"from rs_datasets import Goodreads goodreads = Goodreads ( read_maps = True ) goodreads . info () ratings user_id item_id is_read rating is_reviewed 0 0 948 True 5 False 1 0 947 True 5 True 2 0 946 True 5 False books book_id_csv book_id 0 0 34684622 1 1 34536488 2 2 34017076 users user_id_csv user_id 0 0 8842281e1d1347389f2ab93d60773d4d 1 1 72fb0d0087d28c832f15776b0d936598 2 2 ab2923b738ea3082f5f3efcbbfacb218","title":"Example"},{"location":"Datasets/jester/","text":"Jester Jokes dataset consists of several datasets which contain joke ratings in real values ranging from -10.00 to +10.00. Texts of jokes are available too. Stats Dataset 1 73,421 users 100 jokes collected between April 1999 - May 2003 Dataset 3 54,905 users 150 jokes( 50 not in Dataset 1) collected from November 2006 - Mar 2015 22 jokes have few ratings as they were removed as of May 2009 deemed to be out of date (eg, Bill Clinton jokes;) their ids are: {1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 14, 20, 27, 31, 43, 51, 52, 61, 73, 80, 100, 116}. As of May 2009, the jokes {7, 8, 13, 15, 16, 17, 18, 19} are the \"gauge set\" (as discussed in the Eigentaste paper) and the jokes {1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 14, 20, 27, 31, 43, 51, 52, 61, 73, 80, 100, 116} were removed (i.e. they are never displayed or rated). Dataset 4 7699 users 158 jokes 22 of the jokes don't have ratings, their ids are: {1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 14, 20, 27, 31, 43, 51, 52, 61, 73, 80, 100, 116}. The jokes {1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 14, 20, 27, 31, 43, 51, 52, 61, 73, 80, 100, 116} have been removed (i.e. they are never displayed or rated). Extra parameters dataset=1 one of 1, 3, 4 to choose corresponding version. Structure Dataset 1 consists of 3 matrices as provided, they are not merged together. Ratings are in a form of matrix with columns representing jokes. In original data 99 meant \"no rating\" it is replaced to NaN here. data 1 2 3 ... 0 -7.82 8.79 -9.66 ... 1 4.08 -0.29 6.36 ... 2 NaN NaN NaN ... ... ... ... ... ... Joke texts are available as Pandas.Series jokes 1 A man visits the doctor. The doctor says \"I ha... 2 This couple had an excellent relationship goin... 3 Q. What's 200 feet long and has 4 teeth? A. ...","title":"Jester"},{"location":"Datasets/jester/#jester","text":"Jokes dataset consists of several datasets which contain joke ratings in real values ranging from -10.00 to +10.00. Texts of jokes are available too.","title":"Jester"},{"location":"Datasets/jester/#stats","text":"","title":"Stats"},{"location":"Datasets/jester/#dataset-1","text":"73,421 users 100 jokes collected between April 1999 - May 2003","title":"Dataset 1"},{"location":"Datasets/jester/#dataset-3","text":"54,905 users 150 jokes( 50 not in Dataset 1) collected from November 2006 - Mar 2015 22 jokes have few ratings as they were removed as of May 2009 deemed to be out of date (eg, Bill Clinton jokes;) their ids are: {1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 14, 20, 27, 31, 43, 51, 52, 61, 73, 80, 100, 116}. As of May 2009, the jokes {7, 8, 13, 15, 16, 17, 18, 19} are the \"gauge set\" (as discussed in the Eigentaste paper) and the jokes {1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 14, 20, 27, 31, 43, 51, 52, 61, 73, 80, 100, 116} were removed (i.e. they are never displayed or rated).","title":"Dataset 3"},{"location":"Datasets/jester/#dataset-4","text":"7699 users 158 jokes 22 of the jokes don't have ratings, their ids are: {1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 14, 20, 27, 31, 43, 51, 52, 61, 73, 80, 100, 116}. The jokes {1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 14, 20, 27, 31, 43, 51, 52, 61, 73, 80, 100, 116} have been removed (i.e. they are never displayed or rated).","title":"Dataset 4"},{"location":"Datasets/jester/#extra-parameters","text":"dataset=1 one of 1, 3, 4 to choose corresponding version.","title":"Extra parameters"},{"location":"Datasets/jester/#structure","text":"Dataset 1 consists of 3 matrices as provided, they are not merged together. Ratings are in a form of matrix with columns representing jokes. In original data 99 meant \"no rating\" it is replaced to NaN here. data 1 2 3 ... 0 -7.82 8.79 -9.66 ... 1 4.08 -0.29 6.36 ... 2 NaN NaN NaN ... ... ... ... ... ... Joke texts are available as Pandas.Series jokes 1 A man visits the doctor. The doctor says \"I ha... 2 This couple had an excellent relationship goin... 3 Q. What's 200 feet long and has 4 teeth? A. ...","title":"Structure"},{"location":"Datasets/lastfm/","text":"Last.fm Last.fm-360k contains (user, artist, play count) triplets collected with Last.fm API, using user.getTopArtists() method. Stats 359,347 unique users 186,642 artists with MBID 107,373 artists without MBDID 17,559,530 total rows Example from rs_datasets import Lastfm lastfm = Lastfm () lastfm . info () play_counts user_id artist_id artist_name play_count 0 00000c289a1829a808ac09c00daf10bc3c4e223b 3bd73256-3905-4f3a-97e2-8b341527f805 betty blowtorch 2137 1 00000c289a1829a808ac09c00daf10bc3c4e223b f2fb0ff0-5679-42ec-a55c-15109ce6e320 die \u00c4rzte 1099 2 00000c289a1829a808ac09c00daf10bc3c4e223b b3ae82c2-e60b-4551-a76d-6620f1b456aa melissa etheridge 897 users user_id gender age country signup_date 0 00000c289a1829a808ac09c00daf10bc3c4e223b f 22.0 Germany Feb 1, 2007 1 00001411dc427966b17297bf4d69e7e193135d89 f NaN Canada Dec 4, 2007 2 00004d2ac9316e22dc007ab2243d6fcb239e707d NaN Germany Sep 1, 2006","title":"Last.fm"},{"location":"Datasets/lastfm/#lastfm","text":"Last.fm-360k contains (user, artist, play count) triplets collected with Last.fm API, using user.getTopArtists() method.","title":"Last.fm"},{"location":"Datasets/lastfm/#stats","text":"359,347 unique users 186,642 artists with MBID 107,373 artists without MBDID 17,559,530 total rows","title":"Stats"},{"location":"Datasets/lastfm/#example","text":"from rs_datasets import Lastfm lastfm = Lastfm () lastfm . info () play_counts user_id artist_id artist_name play_count 0 00000c289a1829a808ac09c00daf10bc3c4e223b 3bd73256-3905-4f3a-97e2-8b341527f805 betty blowtorch 2137 1 00000c289a1829a808ac09c00daf10bc3c4e223b f2fb0ff0-5679-42ec-a55c-15109ce6e320 die \u00c4rzte 1099 2 00000c289a1829a808ac09c00daf10bc3c4e223b b3ae82c2-e60b-4551-a76d-6620f1b456aa melissa etheridge 897 users user_id gender age country signup_date 0 00000c289a1829a808ac09c00daf10bc3c4e223b f 22.0 Germany Feb 1, 2007 1 00001411dc427966b17297bf4d69e7e193135d89 f NaN Canada Dec 4, 2007 2 00004d2ac9316e22dc007ab2243d6fcb239e707d NaN Germany Sep 1, 2006","title":"Example"},{"location":"Datasets/movielens/","text":"MovieLens MovieLens is probably the most popular rs dataset out there. Contains movie ratings from grouplens site. Some versions provide addational information such as user info or tags. Versions Following stable versions are available: Version Size Ratings Users Movies Tags 25m 250MB 25m 162k 62k 1m 20m 190MB 20m 138k 27k 456k 10m 63MB 10m 72k 10k 100k 1m 6MB 1m 6k 4k \u2014 100k 5MB 100k 1k 1.7k \u2014 There are also 2 versions that change as time goes and are not recommended for research. That is latest version which contains all the data they have for the moment (bigger than 25m ) and small which is just a subset of the latest version. small is loaded by default if you don't specify version. Extra parameters version='small' One of {'100k', '1m', '10m', '20m', '25m', 'small', 'latest'} read_genome=False whether to read genome tag dataset or not (available from version 20m and up). Are not loaded by default to save memory. Example from rs_datasets import MovieLens ml = MovieLens ( '10m' ) ml . info () ratings user_id item_id rating timestamp 0 1 122 5.0 838985046 1 1 185 5.0 838983525 2 1 231 5.0 838983392 items item_id title genres 0 1 Toy Story (1995) Adventure|Animation|Children|Comedy|Fantasy 1 2 Jumanji (1995) Adventure|Children|Fantasy 2 3 Grumpier Old Men (1995) Comedy|Romance tags user_id item_id tag timestamp 0 15 4973 excellent! 1215184630 1 20 1747 politics 1188263867 2 20 1747 satire 1188263867","title":"MovieLens"},{"location":"Datasets/movielens/#movielens","text":"MovieLens is probably the most popular rs dataset out there. Contains movie ratings from grouplens site. Some versions provide addational information such as user info or tags.","title":"MovieLens"},{"location":"Datasets/movielens/#versions","text":"Following stable versions are available: Version Size Ratings Users Movies Tags 25m 250MB 25m 162k 62k 1m 20m 190MB 20m 138k 27k 456k 10m 63MB 10m 72k 10k 100k 1m 6MB 1m 6k 4k \u2014 100k 5MB 100k 1k 1.7k \u2014 There are also 2 versions that change as time goes and are not recommended for research. That is latest version which contains all the data they have for the moment (bigger than 25m ) and small which is just a subset of the latest version. small is loaded by default if you don't specify version.","title":"Versions"},{"location":"Datasets/movielens/#extra-parameters","text":"version='small' One of {'100k', '1m', '10m', '20m', '25m', 'small', 'latest'} read_genome=False whether to read genome tag dataset or not (available from version 20m and up). Are not loaded by default to save memory.","title":"Extra parameters"},{"location":"Datasets/movielens/#example","text":"from rs_datasets import MovieLens ml = MovieLens ( '10m' ) ml . info () ratings user_id item_id rating timestamp 0 1 122 5.0 838985046 1 1 185 5.0 838983525 2 1 231 5.0 838983392 items item_id title genres 0 1 Toy Story (1995) Adventure|Animation|Children|Comedy|Fantasy 1 2 Jumanji (1995) Adventure|Children|Fantasy 2 3 Grumpier Old Men (1995) Comedy|Romance tags user_id item_id tag timestamp 0 15 4973 excellent! 1215184630 1 20 1747 politics 1188263867 2 20 1747 satire 1188263867","title":"Example"},{"location":"Datasets/msd/","text":"Million Song Dataset Million Song Dataset also known as Echo Nest Taste Profile Subset is a part of MSD, which contains play history of songs. Other datasets, such as preprocessed song features can be found at dataset site. Stats 1,019,318 unique users 384,546 unique songs 48,373,586 user-song-play count triplets Extra parameters merge_kaggle_splits=True In MSD Challenge on Kaggle there were public and private parts. By default they are merged together. drop_mismatches=True There is a matching error between track ids and song ids in MSD. It shouldn't matter if you don't use audio features, but by default these items are removed. Warning Dataset is quite big and loads for about 5 minutes first time, taking about 1.2GB RAM. If you use default recommended parameters, processed data is saved to disk so that consequent loads take about 30 seconds. Example from rs_datasets import MillionSongDataset msd = MillionSongDataset () msd . info () train user_id item_id play_count 0 b80344d063b5ccb3212f76538f3d9e43d87dca9e SOAKIMP12A8C130995 1 1 b80344d063b5ccb3212f76538f3d9e43d87dca9e SOAPDEY12A81C210A9 1 2 b80344d063b5ccb3212f76538f3d9e43d87dca9e SOBBMDR12A8C13253B 2 val user_id item_id play_count 0 0007140a3796e901f3190f12e9de6d7548d4ac4a SONVMBN12AC9075271 1 1 0007140a3796e901f3190f12e9de6d7548d4ac4a SOVIGZG12A6D4FB188 1 2 0007140a3796e901f3190f12e9de6d7548d4ac4a SOZGXYF12AB0185579 2 test user_id item_id play_count 0 00007a02388c208ea7176479f6ae06f8224355b3 SOAITVD12A6D4F824B 3 1 00007a02388c208ea7176479f6ae06f8224355b3 SONZGLW12A6D4FBBC1 1 2 00007a02388c208ea7176479f6ae06f8224355b3 SOXNWYP12A6D4FBDC4 1","title":"Million Song Dataset"},{"location":"Datasets/msd/#million-song-dataset","text":"Million Song Dataset also known as Echo Nest Taste Profile Subset is a part of MSD, which contains play history of songs. Other datasets, such as preprocessed song features can be found at dataset site.","title":"Million Song Dataset"},{"location":"Datasets/msd/#stats","text":"1,019,318 unique users 384,546 unique songs 48,373,586 user-song-play count triplets","title":"Stats"},{"location":"Datasets/msd/#extra-parameters","text":"merge_kaggle_splits=True In MSD Challenge on Kaggle there were public and private parts. By default they are merged together. drop_mismatches=True There is a matching error between track ids and song ids in MSD. It shouldn't matter if you don't use audio features, but by default these items are removed. Warning Dataset is quite big and loads for about 5 minutes first time, taking about 1.2GB RAM. If you use default recommended parameters, processed data is saved to disk so that consequent loads take about 30 seconds.","title":"Extra parameters"},{"location":"Datasets/msd/#example","text":"from rs_datasets import MillionSongDataset msd = MillionSongDataset () msd . info () train user_id item_id play_count 0 b80344d063b5ccb3212f76538f3d9e43d87dca9e SOAKIMP12A8C130995 1 1 b80344d063b5ccb3212f76538f3d9e43d87dca9e SOAPDEY12A81C210A9 1 2 b80344d063b5ccb3212f76538f3d9e43d87dca9e SOBBMDR12A8C13253B 2 val user_id item_id play_count 0 0007140a3796e901f3190f12e9de6d7548d4ac4a SONVMBN12AC9075271 1 1 0007140a3796e901f3190f12e9de6d7548d4ac4a SOVIGZG12A6D4FB188 1 2 0007140a3796e901f3190f12e9de6d7548d4ac4a SOZGXYF12AB0185579 2 test user_id item_id play_count 0 00007a02388c208ea7176479f6ae06f8224355b3 SOAITVD12A6D4F824B 3 1 00007a02388c208ea7176479f6ae06f8224355b3 SONZGLW12A6D4FBBC1 1 2 00007a02388c208ea7176479f6ae06f8224355b3 SOXNWYP12A6D4FBDC4 1","title":"Example"},{"location":"Datasets/netflix/","text":"Netflix Classic dataset from the famous Netflix Prize which took place 2006-2009. No ratings available for test data. Stats 480,189 users 17,770 movies 100m ratings on the scale from 1 to 5 Example from rs_datasets import Netflix netflix = Netflix () netflix . info () movies item_id year title 0 1 2003.0 Dinosaur Planet 1 2 2004.0 Isle of Man TT 2004 Review 2 3 1997.0 Character test item_id user_id timestamp 0 1 1046323 2005-12-19 1 1 1080030 2005-12-23 2 1 1830096 2005-03-14 train item_id user_id rating timestamp 0 373 643460 4 2005-01-26 1 373 349399 5 2002-11-06 2 373 1315469 2 2005-08-15 Warning It is not recommended to read data without wrapper ( df = pd.read_parquet ) when using PyCharm scientific mode. PyCharm tries to load all 100m rows to show DataFrame info, which causes huge memory consumption and freezes. When loading with a wrapper (as in using this class) it doesn't load that until you specifically try to show it.","title":"Netflix"},{"location":"Datasets/netflix/#netflix","text":"Classic dataset from the famous Netflix Prize which took place 2006-2009. No ratings available for test data.","title":"Netflix"},{"location":"Datasets/netflix/#stats","text":"480,189 users 17,770 movies 100m ratings on the scale from 1 to 5","title":"Stats"},{"location":"Datasets/netflix/#example","text":"from rs_datasets import Netflix netflix = Netflix () netflix . info () movies item_id year title 0 1 2003.0 Dinosaur Planet 1 2 2004.0 Isle of Man TT 2004 Review 2 3 1997.0 Character test item_id user_id timestamp 0 1 1046323 2005-12-19 1 1 1080030 2005-12-23 2 1 1830096 2005-03-14 train item_id user_id rating timestamp 0 373 643460 4 2005-01-26 1 373 349399 5 2002-11-06 2 373 1315469 2 2005-08-15 Warning It is not recommended to read data without wrapper ( df = pd.read_parquet ) when using PyCharm scientific mode. PyCharm tries to load all 100m rows to show DataFrame info, which causes huge memory consumption and freezes. When loading with a wrapper (as in using this class) it doesn't load that until you specifically try to show it.","title":"Example"},{"location":"Datasets/rekko/","text":"Rekko Movie data from Rekko Challenge . No ratings available for test data. Stats 9,643,012 transactions 438,790 ratings 0 to 10 499,663 users with transactions 104,563 users with ratings 8296 movies Example from rs_datasets import Rekko rekko = Rekko () rekko . info () transactions item_id user_id consumption_mode ts watched_time device_type device_manufacturer 0 3336 5177 S 4.430518e+07 4282 0 50 1 481 593316 S 4.430518e+07 2989 0 11 2 4128 262355 S 4.430518e+07 833 0 50 ratings user_id item_id rating ts 0 571252 1364 10 4.430517e+07 1 63140 3037 10 4.430514e+07 2 443817 4363 8 4.430514e+07 bookmarks user_id item_id ts 0 301135 7185 4.430516e+07 1 301135 4083 4.430516e+07 2 301135 10158 4.430516e+07 Additional info available in json catalogue: rekko . catalogue [ '8432' ] { 'type': 'movie', 'availability': ['purchase', 'rent', 'subscription'], 'duration': 100, 'feature_1': 9059050.751458582, 'feature_2': 0.7044612684, 'feature_3': 7, 'feature_4': 1.1212215513, 'feature_5': 0.5927161087, 'attributes': [14658, 27695, 27696, 3713, 2025, 7, 13953, 10, 42, 14, 15, 239, 20, 21, 13954, 197] }","title":"Rekko"},{"location":"Datasets/rekko/#rekko","text":"Movie data from Rekko Challenge . No ratings available for test data.","title":"Rekko"},{"location":"Datasets/rekko/#stats","text":"9,643,012 transactions 438,790 ratings 0 to 10 499,663 users with transactions 104,563 users with ratings 8296 movies","title":"Stats"},{"location":"Datasets/rekko/#example","text":"from rs_datasets import Rekko rekko = Rekko () rekko . info () transactions item_id user_id consumption_mode ts watched_time device_type device_manufacturer 0 3336 5177 S 4.430518e+07 4282 0 50 1 481 593316 S 4.430518e+07 2989 0 11 2 4128 262355 S 4.430518e+07 833 0 50 ratings user_id item_id rating ts 0 571252 1364 10 4.430517e+07 1 63140 3037 10 4.430514e+07 2 443817 4363 8 4.430514e+07 bookmarks user_id item_id ts 0 301135 7185 4.430516e+07 1 301135 4083 4.430516e+07 2 301135 10158 4.430516e+07 Additional info available in json catalogue: rekko . catalogue [ '8432' ] { 'type': 'movie', 'availability': ['purchase', 'rent', 'subscription'], 'duration': 100, 'feature_1': 9059050.751458582, 'feature_2': 0.7044612684, 'feature_3': 7, 'feature_4': 1.1212215513, 'feature_5': 0.5927161087, 'attributes': [14658, 27695, 27696, 3713, 2025, 7, 13953, 10, 42, 14, 15, 239, 20, 21, 13954, 197] }","title":"Example"}]}